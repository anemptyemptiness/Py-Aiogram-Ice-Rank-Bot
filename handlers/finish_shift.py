from datetime import datetime, timedelta, timezone
from typing import Dict, Union, Any

from aiogram.types import Message, CallbackQuery, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.filters import StateFilter, Command
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest

from keyboards.keyboard import create_places_kb, create_cancel_kb, create_yes_no_kb
from middleware.album_middleware import AlbumsMiddleware
from lexicon.lexicon_ru import RUSSIAN_WEEK_DAYS
from config.config import config
from fsm.fsm import FSMFinishShift
from db import DB

router_finish = Router()
router_finish.message.middleware(middleware=AlbumsMiddleware(2))
place_chat: dict = {title: chat_id for title, chat_id in DB.get_places()}


async def report(dictionary: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return f"üìù–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {DB.get_current_name(user_id=user_id)}\n\n" \
           f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è: <em>{'–¥–∞' if dictionary['is_disinfection'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ö–æ–Ω—å–∫–∏ –Ω–∞ —Å—É—à–∫–µ: <em>{'–¥–∞' if dictionary['ice_rank_on_drying'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤: <em>{'–¥–∞‚ö†Ô∏è' if dictionary['is_ice_rank_defects'] == 'yes' else '–Ω–µ—Ç'}</em>\n" \
           f"–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–æ—Å–∫–∏ –∏ —à–∞–ø–æ—á–∫–∏: <em>{'–¥–∞' if dictionary['is_hats_and_socks'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∑–∞—â–∏—Ç—ã –∏–ª–∏ —à–ª–µ–º–æ–≤: <em>{'–¥–∞‚ö†Ô∏è' if dictionary['is_depend_defects'] == 'yes' else '–Ω–µ—Ç'}</em>\n" \
           f"–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞: <em>{'–¥–∞' if dictionary['is_music'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã: <em>{'–¥–∞' if dictionary['is_alert_off'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ü–∞–≤–∏–ª—å–æ–Ω –∑–∞–∫—Ä—ã—Ç: <em>{'–¥–∞' if dictionary['is_working_place_closed'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                dictionary=data,
                date=date,
                user_id=message.chat.id,
            ),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="html",
        )

        if data["is_ice_rank_defects"] == "yes":
            ice_rank_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–î–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=ice_rank_defects,
            )

        if data["is_depend_defects"] == "yes":
            depend_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–î–µ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –∏ —à–ª–µ–º–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["depend_defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=depend_defects,
            )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüëçüèª",
            reply_markup=ReplyKeyboardRemove(),
        )

    except TelegramBadRequest as e:
        await message.bot.send_message(
            text=f"Finish shift report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=config.admins[0],
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

        await state.clear()


@router_finish.message(Command(commands="finish_shift"), StateFilter(default_state))
async def process_start_finish_shift_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=create_places_kb(),
        parse_mode="html",
    )

    await state.set_state(FSMFinishShift.place)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_mega_belaya_dacha")
async def process_mega_belaya_dacha_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú–µ–≥–∞ –ë–µ–ª–∞—è –î–∞—á–∞")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ú–µ–≥–∞ –ë–µ–ª–∞—è –î–∞—á–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_disinfection)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_mega_nizh_novgorod")
async def process_nizhniy_novgorod_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú–µ–≥–∞ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ú–µ–≥–∞ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_disinfection)


@router_finish.callback_query(StateFilter(FSMFinishShift.place), F.data == "place_novaya_riga_autlet")
async def process_novaya_riga_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ù–æ–≤–∞—è –†–∏–≥–∞ –ê—É—Ç–ª–µ—Ç")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ù–æ–≤–∞—è –†–∏–≥–∞ –ê—É—Ç–ª–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_disinfection)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_disinfection), F.data == "yes")
async def process_is_disinfection_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_disinfection="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ö–æ–Ω—å–∫–∏ –Ω–∞ —Å—É—à–∫–µ?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.ice_rank_on_drying)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_disinfection), F.data == "no")
async def process_is_disinfection_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_disinfection="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ö–æ–Ω—å–∫–∏ –Ω–∞ —Å—É—à–∫–µ?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.ice_rank_on_drying)


@router_finish.callback_query(StateFilter(FSMFinishShift.ice_rank_on_drying), F.data == "yes")
async def process_ice_rank_drying_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(ice_rank_on_drying="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ö–æ–Ω—å–∫–∏ –Ω–∞ —Å—É—à–∫–µ?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_ice_rank_defects)


@router_finish.callback_query(StateFilter(FSMFinishShift.ice_rank_on_drying), F.data == "no")
async def process_ice_rank_drying_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(ice_rank_on_drying="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ö–æ–Ω—å–∫–∏ –Ω–∞ —Å—É—à–∫–µ?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_ice_rank_defects)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_ice_rank_defects), F.data == "yes")
async def process_is_ice_rank_defects_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_ice_rank_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.defects_photo)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_ice_rank_defects), F.data == "no")
async def process_is_ice_rank_defects_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_ice_rank_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–æ—Å–∫–∏ –∏ —à–∞–ø–æ—á–∫–∏?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_hats_and_socks)


@router_finish.message(StateFilter(FSMFinishShift.defects_photo))
async def process_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "defects_photo" not in await state.get_data():
            await state.update_data(defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–æ—Å–∫–∏ –∏ —à–∞–ø–æ—á–∫–∏?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMFinishShift.is_hats_and_socks)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ <b>—Ñ–æ—Ç–æ</b> –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
            parse_mode="html",
        )


@router_finish.callback_query(StateFilter(FSMFinishShift.is_hats_and_socks), F.data == "yes")
async def process_is_hats_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_hats_and_socks="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–æ—Å–∫–∏ –∏ —à–∞–ø–æ—á–∫–∏?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —à–ª–µ–º–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_depend_defects)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_hats_and_socks), F.data == "no")
async def process_is_hats_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_hats_and_socks="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –Ω–æ—Å–∫–∏ –∏ —à–∞–ø–æ—á–∫–∏?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —à–ª–µ–º–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_depend_defects)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_depend_defects), F.data == "yes")
async def process_is_depend_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_depend_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —à–ª–µ–º–æ–≤?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.depend_defects_photo)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_depend_defects), F.data == "no")
async def process_is_depend_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_depend_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –∑–∞—â–∏—Ç—ã –∏–ª–∏ —à–ª–µ–º–æ–≤?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_music)


@router_finish.message(StateFilter(FSMFinishShift.depend_defects_photo))
async def process_depend_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "depend_defects_photo" not in await state.get_data():
            await state.update_data(depend_defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMFinishShift.is_music)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_finish.callback_query(StateFilter(FSMFinishShift.is_music), F.data == "yes")
async def process_is_music_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_music="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_alert_off)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_music), F.data == "no")
async def process_is_music_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_music="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_alert_off)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_alert_off), F.data == "yes")
async def process_is_alert_off_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_alert_off="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–∞–≤–∏–ª—å–æ–Ω –∑–∞–∫—Ä—ã—Ç?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_working_place_closed)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_alert_off), F.data == "no")
async def process_is_alert_off_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_alert_off="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ü–∞–≤–∏–ª—å–æ–Ω –∑–∞–∫—Ä—ã—Ç?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMFinishShift.is_working_place_closed)


@router_finish.callback_query(StateFilter(FSMFinishShift.is_working_place_closed), F.data == "yes")
async def process_working_place_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_working_place_closed="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–∞–≤–∏–ª—å–æ–Ω –∑–∞–∫—Ä—ã—Ç?\n\n"
             "‚û¢ –î–∞"
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    finish_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=finish_shift_dict,
        date=current_date,
        chat_id=place_chat[finish_shift_dict["place"]],
    )

    await callback.answer()


@router_finish.callback_query(StateFilter(FSMFinishShift.is_working_place_closed), F.data == "no")
async def process_working_place_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_working_place_closed="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–∞–≤–∏–ª—å–æ–Ω –∑–∞–∫—Ä—ã—Ç?\n\n"
             "‚û¢ –ù–µ—Ç"
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    finish_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=finish_shift_dict,
        date=current_date,
        chat_id=place_chat[finish_shift_dict["place"]],
    )

    await callback.answer()
