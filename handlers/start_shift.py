from typing import Dict, Any, Union
from datetime import datetime, timezone, timedelta

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from fsm.fsm import FSMStartShift
from keyboards.keyboard import create_yes_no_kb, create_cancel_kb, create_places_kb, create_rules_kb
from middleware.album_middleware import AlbumsMiddleware
from lexicon.lexicon_ru import RUSSIAN_WEEK_DAYS
from config.config import config
from db import DB

router_start_shift = Router()
router_start_shift.message.middleware(middleware=AlbumsMiddleware(2))
place_chat: dict = {title: chat_id for title, chat_id in DB.get_places()}


async def report(dictionary: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return "üìù–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã:\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {DB.get_current_name(user_id=user_id)}\n\n" \
           f"–ï—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤: <em>{'–Ω–µ—Ç' if dictionary['is_defects'] == 'no' else '–¥–∞‚ö†Ô∏è'}</em>\n" \
           f"–í—Å–µ —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã: <em>{'–¥–∞' if dictionary['laces'] == 'yes' else 'no‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —à–∞–ø–æ—á–∫–∏ –∏ –Ω–æ—Å–∫–∏: <em>{'–¥–∞' if dictionary['hats_and_socks'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã —É –ø–∏–Ω–≥–≤–∏–Ω–æ–≤: <em>{'–Ω–µ—Ç' if dictionary['is_penguins'] == 'no' else '–¥–∞‚ö†Ô∏è'}</em>\n" \
           f"–ï—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è: <em>{'–Ω–µ—Ç' if dictionary['is_boxes'] == 'no' else '–¥–∞‚ö†Ô∏è'}</em>\n" \
           f"–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: <em>{'–¥–∞' if dictionary['is_music'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>\n" \
           f"–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: <em>{'–¥–∞' if dictionary['is_alert'] == 'yes' else '–Ω–µ—Ç‚ö†Ô∏è'}</em>"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                dictionary=data,
                date=date,
                user_id=message.chat.id,
            ),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="html",
        )

        await message.bot.send_photo(
            chat_id=chat_id,
            photo=data["employee_photo"],
            caption="–§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        )

        # —Ñ–æ—Ç–æ –ø–∞–≤–∏–ª—å–æ–Ω–∞ (—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ)
        if data["working_place_photo"]:
            working_place_photos = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["working_place_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=working_place_photos
            )

        # —Ñ–æ—Ç–æ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏
        if data["cloakroom_photo"]:
            working_place_photos = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["cloakroom_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=working_place_photos
            )

        if data["is_defects"] == "yes":
            ice_rank_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —É –∫–æ–Ω—å–∫–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=ice_rank_defects,
            )

        if data["is_penguins"] == "yes":
            penguins_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —É –ø–∏–Ω–≥–≤–∏–Ω–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["penguins_defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=penguins_defects,
            )

        if data["is_boxes"] == "yes":
            boxes_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["boxes_defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=boxes_defects,
            )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüëçüèª",
            reply_markup=ReplyKeyboardRemove(),
        )
    except TelegramBadRequest as e:
        await message.bot.send_message(
            text=f"Start shift report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=config.admins[0],
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

        await state.clear()


@router_start_shift.message(Command(commands="start_shift"), StateFilter(default_state))
async def process_start_shift_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=create_places_kb(),
        parse_mode="html",
    )

    await state.set_state(FSMStartShift.place)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_mega_belaya_dacha")
async def process_mega_belaya_dacha_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú–µ–≥–∞ –ë–µ–ª–∞—è –î–∞—á–∞")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ú–µ–≥–∞ –ë–µ–ª–∞—è –î–∞—á–∞",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.employee_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_mega_nizh_novgorod")
async def process_nizhniy_novgorod_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ú–µ–≥–∞ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ú–µ–≥–∞ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.employee_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.place), F.data == "place_novaya_riga_autlet")
async def process_novaya_riga_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(place="–ù–æ–≤–∞—è –†–∏–≥–∞ –ê—É—Ç–ª–µ—Ç")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             "‚û¢ –ù–æ–≤–∞—è –†–∏–≥–∞ –ê—É—Ç–ª–µ—Ç",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.employee_photo)


@router_start_shift.message(StateFilter(FSMStartShift.employee_photo))
async def process_employee_photo_command(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(employee_photo=message.photo[-1].file_id)
        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–∞–≤–∏–ª—å–æ–Ω–∞ –ø—Ä–æ–∫–∞—Ç–∞",
            reply_markup=create_cancel_kb(),
        )
        await state.set_state(FSMStartShift.working_place_photo)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –í–∞—à–µ <b>—Ñ–æ—Ç–æ</b>",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.message(StateFilter(FSMStartShift.working_place_photo))
async def process_working_place_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "working_place_photo" not in await state.get_data():
            await state.update_data(working_place_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏",
            reply_markup=create_cancel_kb(),
        )
        await state.set_state(FSMStartShift.cloakroom_photo)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å <b>—Ñ–æ—Ç–æ</b> –ø–∞–≤–∏–ª—å–æ–Ω–∞",
            reply_markup=create_cancel_kb(),
            parse_mode="html",
        )


@router_start_shift.message(StateFilter(FSMStartShift.cloakroom_photo))
async def process_cloakroom_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "cloakroom_photo" not in await state.get_data():
            await state.update_data(cloakroom_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–í—ã –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –∫–æ–Ω—å–∫–∏ —Å —Å—É—à–∏–ª–∫–∏?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.ice_rank_is_dry)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å <b>—Ñ–æ—Ç–æ</b> —Ä–∞–∑–¥–µ–≤–∞–ª–∫–∏",
            reply_markup=create_cancel_kb(),
            parse_mode="html",
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.ice_rank_is_dry), F.data == "yes")
async def process_ice_rank_is_dry_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(ice_rank_is_dry="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –∫–æ–Ω—å–∫–∏ —Å —Å—É—à–∏–ª–∫–∏?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_defects)


@router_start_shift.callback_query(StateFilter(FSMStartShift.ice_rank_is_dry), F.data == "no")
async def process_ice_rank_is_dry_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(ice_rank_is_dry="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—ã –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –∫–æ–Ω—å–∫–∏ —Å —Å—É—à–∏–ª–∫–∏?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="‚ö†Ô∏è–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –∫–æ–Ω—å–∫–∏ —Å —Å—É—à–∏–ª–∫–∏!\n\n"
             "–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_defects)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_defects), F.data == "yes")
async def process_is_defects_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–µ—Ñ–µ–∫—Ç—ã –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.defects_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_defects), F.data == "no")
async def process_is_defects_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–í—Å–µ —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.laces)


@router_start_shift.message(StateFilter(FSMStartShift.defects_photo))
async def process_ice_rank_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "defects_photo" not in await state.get_data():
            await state.update_data(defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–í—Å–µ —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.laces)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.laces), F.data == "yes")
async def process_laces_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(laces="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—Å–µ —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —à–∞–ø–æ—á–∫–∏ –∏ –Ω–æ—Å–∫–∏?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.hats_and_socks)


@router_start_shift.callback_query(StateFilter(FSMStartShift.laces), F.data == "no")
async def process_laces_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(laces="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í—Å–µ —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="‚ö†Ô∏è–ó–∞–ø—Ä–∞–≤—å—Ç–µ —à–Ω—É—Ä–∫–∏!\n\n"
             "–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —à–∞–ø–æ—á–∫–∏ –∏ –Ω–æ—Å–∫–∏?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.hats_and_socks)


@router_start_shift.callback_query(StateFilter(FSMStartShift.hats_and_socks), F.data == "yes")
async def process_hats_socks_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(hats_and_socks="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —à–∞–ø–æ—á–∫–∏ –∏ –Ω–æ—Å–∫–∏?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_penguins)


@router_start_shift.callback_query(StateFilter(FSMStartShift.hats_and_socks), F.data == "no")
async def process_hats_socks_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(hats_and_socks="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —à–∞–ø–æ—á–∫–∏ –∏ –Ω–æ—Å–∫–∏?\n\n"
             "‚û¢ –ù–µ—Ç\n\n"
             "‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Å—Ä–æ—á–Ω–æ</b> —É–≤–µ–¥–æ–º–∏—Ç–µ –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ!‚ö†Ô∏è",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞—Ö?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_penguins)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_penguins), F.data == "yes")
async def process_penguins_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_penguins="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞—Ö?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.penguins_defects_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_penguins), F.data == "no")
async def process_penguins_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_penguins="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞—Ö?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_boxes)


@router_start_shift.message(StateFilter(FSMStartShift.penguins_defects_photo))
async def process_penguins_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "penguins_defects_photo" not in await state.get_data():
            await state.update_data(penguins_defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.is_boxes)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_boxes), F.data == "yes")
async def process_is_boxes_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_boxes="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.boxes_defects_photo)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_boxes), F.data == "no")
async def process_is_boxes_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_boxes="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É —è—â–∏–∫–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ —à–ª–µ–º–∞ –∏ –∑–∞—â–∏—Ç–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_defend)


@router_start_shift.message(StateFilter(FSMStartShift.boxes_defects_photo))
async def process_boxes_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "boxes_defects_photo" not in await state.get_data():
            await state.update_data(boxes_defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ï—Å—Ç—å –ª–∏ —à–ª–µ–º–∞ –∏ –∑–∞—â–∏—Ç–∞?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMStartShift.is_defend)
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
        )


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_defend), F.data == "yes")
async def process_defend_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_defend="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ —à–ª–µ–º–∞ –∏ –∑–∞—â–∏—Ç–∞?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_music)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_defend), F.data == "no")
async def process_defend_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_defend="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ —à–ª–µ–º–∞ –∏ –∑–∞—â–∏—Ç–∞?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_music)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_music), F.data == "yes")
async def process_music_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_music="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–µ–∞–Ω—Å–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_alert)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_music), F.data == "no")
async def process_music_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_music="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="‚ö†Ô∏è–í–∫–ª—é—á–∏—Ç–µ –º—É–∑—ã–∫—É!\n\n"
             "–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–µ–∞–Ω—Å–æ–≤?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMStartShift.is_alert)


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_alert), F.data == "yes")
async def process_is_alert_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_alert="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–µ–∞–Ω—Å–æ–≤?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é –í–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—èüòä"
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    start_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=start_shift_dict,
        date=current_date,
        chat_id=place_chat[start_shift_dict["place"]],
    )

    await callback.answer()


@router_start_shift.callback_query(StateFilter(FSMStartShift.is_alert), F.data == "no")
async def process_is_alert_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_alert="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–í–∫–ª—é—á–µ–Ω—ã –ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–µ–∞–Ω—Å–æ–≤?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–°–ø–∞—Å–∏–±–æ! –ñ–µ–ª–∞—é –í–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—èüòä"
    )

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    start_shift_dict = await state.get_data()

    await send_report(
        message=callback.message,
        state=state,
        data=start_shift_dict,
        date=current_date,
        chat_id=place_chat[start_shift_dict["place"]],
    )

    await callback.answer()
