from typing import Dict, Any, Union
from datetime import datetime, timedelta, timezone

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

from src.keyboards.keyboard import create_cancel_kb, create_yes_no_kb, create_places_kb
from src.fsm.fsm import FSMDailyChecking
from src.middleware.album_middleware import AlbumsMiddleware
from src.lexicon.lexicon_ru import RUSSIAN_WEEK_DAYS
from src.callbacks.place import PlaceCallbackFactory
from src.db.queries.dao.dao import AsyncOrm
from src.config import settings
from src.db import cached_places
import logging

logger = logging.getLogger(__name__)

router_daily = Router()
router_daily.message.middleware(middleware=AlbumsMiddleware(2))


async def report(dictionary: Dict[str, Any], date: str, user_id: Union[str, int]) -> str:
    return f"üìî–î–Ω–µ–≤–Ω–∞—è —Å–≤–µ—Ä–∫–∞:\n\n" \
           f"–î–∞—Ç–∞: {date}\n" \
           f"–¢–æ—á–∫–∞: {dictionary['place']}\n" \
           f"–ò–º—è: {await AsyncOrm.get_current_name(user_id=user_id)}\n\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{'–¥–∞' if dictionary['check_people_pays'] == 'yes' else '–Ω–µ—Ç'}</em>\n" \
           f"–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã —É –∫–æ–Ω—å–∫–æ–≤: <em>{'–Ω–µ—Ç' if dictionary['is_ice_rank_defects'] == 'no' else '–¥–∞‚ö†Ô∏è'}</em>\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: <em>{dictionary['count_tickets']}</em>\n" \
           f"–°—É–º–º–∞: <em>{dictionary['summary']} <b>‚ÇΩ</b></em>\n\n" \
           f"–ï—Å—Ç—å –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: <em>{'–Ω–µ—Ç' if dictionary['is_strong_defects'] == 'no' else '‚ö†Ô∏è–ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º‚ö†Ô∏è'}</em>\n\n" \
           f"–ï—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: <em>{'–Ω–µ—Ç' if dictionary['book_of_suggestions'] == 'no' else dictionary['book_info']}</em>"


async def send_report(message: Message, state: FSMContext, data: dict, date: str, chat_id: Union[str, int]):
    try:
        await message.bot.send_message(
            chat_id=chat_id,
            text=await report(
                dictionary=data,
                date=date,
                user_id=message.chat.id,
            ),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="html",
        )

        working_place = [
            InputMediaPhoto(
                media=photo_file_id,
                caption="–§–æ—Ç–æ –ø—Ä–æ–∫–∞—Ç–∞" if i == 0 else ""
            ) for i, photo_file_id in enumerate(data["working_place_photo"])
        ]

        await message.bot.send_media_group(
            chat_id=chat_id,
            media=working_place
        )

        if data["is_ice_rank_defects"] == "yes":
            ice_rank_defects = [
                InputMediaPhoto(
                    media=photo_file_id,
                    caption="–§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —É –∫–æ–Ω—å–∫–æ–≤" if i == 0 else ""
                ) for i, photo_file_id in enumerate(data["defects_photo"])
            ]

            await message.bot.send_media_group(
                chat_id=chat_id,
                media=ice_rank_defects
            )

        await message.answer(
            text="–û—Ç–ª–∏—á–Ω–æ! –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ωüëçüèª",
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –Ω–µ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ daily_checking.py –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
        await message.bot.send_message(
            text=f"Daily checking report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    except TelegramAPIError as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å —Ç–µ–ª–µ–≥—Ä–∞–º –≤ daily_checking.py –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
        await message.bot.send_message(
            text=f"Daily checking report error: {e}\n"
                 f"User id: {message.chat.id}",
            chat_id=settings.ADMIN_ID,
            reply_markup=ReplyKeyboardRemove(),
        )
        await message.answer(
            text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–æ–±—â–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É!",
            reply_markup=ReplyKeyboardRemove(),
        )
    finally:
        await state.clear()


@router_daily.message(Command(commands="daily_checking"), StateFilter(default_state))
async def process_start_daily_check_command(message: Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>",
        reply_markup=create_places_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMDailyChecking.place)


@router_daily.callback_query(StateFilter(FSMDailyChecking.place), PlaceCallbackFactory.filter())
async def process_place_command(callback: CallbackQuery, callback_data: PlaceCallbackFactory, state: FSMContext):
    await state.update_data(place=callback_data.title)
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—á—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ <b>–Ω–∏–∂–µ</b>\n\n"
             f"‚û¢ {callback_data.title}",
        parse_mode="html",
    )
    await callback.message.answer(
        text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç —Å—Ö–æ–¥–∏—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.check_people_pays)


@router_daily.callback_query(StateFilter(FSMDailyChecking.check_people_pays), F.data == "yes")
async def process_check_pays_and_people_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(check_people_pays="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç —Å—Ö–æ–¥–∏—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–∫–∞—Ç–∞",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.working_place_photo)


@router_daily.callback_query(StateFilter(FSMDailyChecking.check_people_pays), F.data == "no")
async def process_check_pays_and_people_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(check_people_pays="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç —Å—Ö–æ–¥–∏—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–∫–∞—Ç–∞",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.working_place_photo)


@router_daily.message(StateFilter(FSMDailyChecking.working_place_photo))
async def process_working_place_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "working_place_photo" not in await state.get_data():
            await state.update_data(working_place_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMDailyChecking.is_ice_rank_defects)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å <b>—Ñ–æ—Ç–æ</b> –ø—Ä–æ–∫–∞—Ç–∞",
            reply_markup=create_cancel_kb(),
            parse_mode="html",
        )


@router_daily.callback_query(StateFilter(FSMDailyChecking.is_ice_rank_defects), F.data == "yes")
async def process_is_ice_rank_defects_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_ice_rank_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
        reply_markup=create_cancel_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.defects_photo)


@router_daily.callback_query(StateFilter(FSMDailyChecking.is_ice_rank_defects), F.data == "no")
async def process_is_ice_rank_defects_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_ice_rank_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.book_of_suggestions)


@router_daily.message(StateFilter(FSMDailyChecking.defects_photo))
async def process_ice_rank_defects_photo_command(message: Message, state: FSMContext):
    if message.photo:
        if "defects_photo" not in await state.get_data():
            await state.update_data(defects_photo=[message.photo[-1].file_id])

        await message.answer(
            text="–ï—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?",
            reply_markup=create_yes_no_kb(),
        )
        await state.set_state(FSMDailyChecking.book_of_suggestions)
    else:
        await message.answer(
            text="–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å <b>—Ñ–æ—Ç–æ</b> –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            reply_markup=create_cancel_kb(),
            parse_mode="html",
        )


@router_daily.callback_query(StateFilter(FSMDailyChecking.book_of_suggestions), F.data == "yes")
async def process_book_sug_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(book_of_suggestions="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ <b>–≤ –û–î–ù–û–ú</b> —Å–æ–æ–±—â–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
             "–∂–∞–ª–æ–±—ã: ...\n"
             "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ...",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.book_info)


@router_daily.callback_query(StateFilter(FSMDailyChecking.book_of_suggestions), F.data == "no")
async def process_book_sug_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(book_of_suggestions="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å—Ç—å –ª–∏ –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ï—Å–ª–∏ –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?",
        reply_markup=create_yes_no_kb(),
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.is_strong_defects)


@router_daily.message(StateFilter(FSMDailyChecking.book_info), F.text)
async def process_book_info_command(message: Message, state: FSMContext):
    await state.update_data(book_info='\n' + message.text)
    await message.answer(
        text="–ï—Å—Ç—å –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?",
        reply_markup=create_yes_no_kb(),
    )
    await state.set_state(FSMDailyChecking.is_strong_defects)


@router_daily.message(StateFilter(FSMDailyChecking.book_info))
async def warning_book_info_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ <b>–≤ –û–î–ù–û–ú</b> —Å–æ–æ–±—â–µ–Ω–∏–∏ –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
             "–∂–∞–ª–æ–±—ã: ...\n"
             "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ...",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_daily.callback_query(StateFilter(FSMDailyChecking.is_strong_defects), F.data == "yes")
async def process_is_strong_defects_yes_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_strong_defects="yes")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å–ª–∏ –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?\n\n"
             "‚û¢ –î–∞"
    )
    await callback.message.answer(
        text="–•–æ—Ä–æ—à–æ, —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –Ω–∞—á–∞–ª—å—Å—Ç–≤—É!",
        reply_markup=create_cancel_kb(),
    )
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ <b>—á–∏—Å–ª–æ–º –±–µ–∑ —Ç–æ—á–∫–∏</b>",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.count_tickets)


@router_daily.callback_query(StateFilter(FSMDailyChecking.is_strong_defects), F.data == "no")
async def process_is_strong_defects_no_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(is_strong_defects="no")
    await callback.message.delete_reply_markup()
    await callback.message.edit_text(
        text="–ï—Å–ª–∏ –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?\n\n"
             "‚û¢ –ù–µ—Ç"
    )
    await callback.message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ <b>—á–∏—Å–ª–æ–º –±–µ–∑ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 1</em>",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )
    await callback.answer()
    await state.set_state(FSMDailyChecking.count_tickets)


@router_daily.message(StateFilter(FSMDailyChecking.count_tickets), F.text.isdigit())
async def process_count_tickets_command(message: Message, state: FSMContext):
    await state.update_data(count_tickets=message.text)
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 1000</em>",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )
    await state.set_state(FSMDailyChecking.summary)


@router_daily.message(StateFilter(FSMDailyChecking.count_tickets))
async def warning_count_tickets_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ <b>—á–∏—Å–ª–æ–º –±–µ–∑ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤</b>\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 1</em>",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )


@router_daily.message(StateFilter(FSMDailyChecking.summary), F.text.isdigit())
async def process_summary_command(message: Message, state: FSMContext):
    await state.update_data(summary=message.text)

    day_of_week = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime('%A')
    current_date = datetime.now(tz=timezone(timedelta(hours=3.0))).strftime(
        f'%d/%m/%Y - {RUSSIAN_WEEK_DAYS[day_of_week]}')

    daily_check_dict = await state.get_data()

    await send_report(
        message=message,
        state=state,
        data=daily_check_dict,
        date=current_date,
        chat_id=cached_places[daily_check_dict["place"]],
    )


@router_daily.message(StateFilter(FSMDailyChecking.summary))
async def warning_summary_command(message: Message):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤\n\n"
             "<em>–ù–∞–ø—Ä–∏–º–µ—Ä: 1000</em>",
        reply_markup=create_cancel_kb(),
        parse_mode="html",
    )
